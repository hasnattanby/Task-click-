import React, { useState, useEffect, useRef } from 'react';
import { useParams, Link } from 'react-router-dom';
import { useMessage } from '../../context/MessageContext';
import { useAuth } from '../../context/AuthContext';
import { format } from 'date-fns';
import { FaComments, FaPaperPlane, FaImage, FaSmile, FaArrowLeft, FaEllipsisV } from 'react-icons/fa';
import Picker from 'emoji-picker-react';

const Messenger = () => {
  const { userId } = useParams();
  const { 
    conversations, 
    messages, 
    activeConversation, 
    loading, 
    fetchConversations, 
    fetchMessages, 
    sendMessage, 
    setActiveConversation 
  } = useMessage();
  const { user } = useAuth();
  
  const [messageInput, setMessageInput] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const messageContainerRef = useRef(null);
  const fileInputRef = useRef(null);
  
  // Fetch conversations on mount
  useEffect(() => {
    fetchConversations();
  }, [fetchConversations]);
  
  // Fetch messages when userId changes
  useEffect(() => {
    if (userId) {
      fetchMessages(userId);
    } else if (conversations.length > 0) {
      // Select first conversation if none specified
      fetchMessages(conversations[0].id);
    }
  }, [userId, conversations, fetchMessages]);
  
  // Scroll to bottom when new messages arrive
  useEffect(() => {
    if (messageContainerRef.current) {
      messageContainerRef.current.scrollTop = messageContainerRef.current.scrollHeight;
    }
  }, [messages]);
  
  const handleSendMessage = (e) => {
    e.preventDefault();
    if (!messageInput.trim() || !activeConversation) return;
    
    sendMessage(activeConversation.id, messageInput);
    setMessageInput('');
    setShowEmojiPicker(false);
  };
  
  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file && activeConversation) {
      const reader = new FileReader();
      reader.onloadend = () => {
        // Send image as base64 string
        sendMessage(activeConversation.id, `[Image] ${reader.result}`);
      };
      reader.readAsDataURL(file);
    }
  };
  
  const onEmojiClick = (emojiObject) => {
    setMessageInput(prev => prev + emojiObject.emoji);
  };
  
  // Helper to format message timestamp
  const formatMessageTime = (timestamp) => {
    const date = new Date(timestamp);
    return format(date, 'hh:mm a');
  };
  
  return (
    <div className="container mx-auto px-0 sm:px-4 py-0 sm:py-6 pb-20 h-[calc(100vh-130px)]">
      <div className="flex h-full bg-white rounded-none sm:rounded-lg shadow overflow-hidden">
        {/* Conversation List (hide on mobile when a conversation is active) */}
        <div className={`w-full sm:w-1/3 border-r border-gray-200 ${activeConversation && userId ? 'hidden sm:block' : ''}`}>
          <div className="p-4 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-800">বার্তালাপ</h2>
          </div>
          
          {loading && conversations.length === 0 ? (
            <div className="flex justify-center py-10">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-500"></div>
            </div>
          ) : conversations.length === 0 ? (
            <div className="p-6 text-center">
              <div className="inline-block p-3 bg-gray-100 rounded-full mb-3">
                <FaComments className="text-2xl text-gray-400" />
              </div>
              <h3 className="text-md font-medium text-gray-700 mb-1">কোন বার্তালাপ নেই</h3>
              <p className="text-sm text-gray-500">আপনি এখনও কারও সাথে বার্তালাপ শুরু করেননি</p>
            </div>
          ) : (
            <div className="overflow-y-auto h-[calc(100%-60px)]">
              {conversations.map((conversation) => (
                <Link
                  key={conversation.id}
                  to={`/messenger/${conversation.id}`}
                  className={`flex items-center p-4 border-b border-gray-100 hover:bg-gray-50 transition ${activeConversation?.id === conversation.id ? 'bg-indigo-50' : ''}`}
                >
                  <div className="mr-3 relative">
                    <div className="h-12 w-12 rounded-full bg-gray-200 flex items-center justify-center overflow-hidden">
                      {conversation.profileImage ? (
                        <img 
                          src={conversation.profileImage} 
                          alt={conversation.name} 
                          className="h-full w-full object-cover"
                        />
                      ) : (
                        <FaComments className="text-gray-400" />
                      )}
                    </div>
                    {/* Online indicator */}
                    {conversation.online && (
                      <span className="absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-white"></span>
                    )}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex justify-between items-baseline">
                      <h3 className="text-sm font-medium text-gray-800 truncate">
                        {conversation.name}
                      </h3>
                      <span className="text-xs text-gray-500">
                        {format(new Date(conversation.timestamp), 'hh:mm a')}
                      </span>
                    </div>
                    <p className="text-xs text-gray-500 truncate mt-1">
                      {conversation.lastMessage}
                    </p>
                  </div>
                  {conversation.unread > 0 && (
                    <div className="ml-2">
                      <span className="inline-flex items-center justify-center h-5 w-5 rounded-full bg-indigo-600 text-white text-xs">
                        {conversation.unread}
                      </span>
                    </div>
                  )}
                </Link>
              ))}
            </div>
          )}
        </div>
        
        {/* Message Area */}
        <div className={`w-full sm:w-2/3 flex flex-col ${!activeConversation || !userId ? 'hidden sm:flex' : ''}`}>
          {activeConversation ? (
            <>
              {/* Conversation Header */}
              <div className="p-4 border-b border-gray-200 flex items-center">
                <Link 
                  to="/messenger" 
                  className="sm:hidden mr-3 text-gray-600"
                >
                  <FaArrowLeft />
                </Link>
                
                <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center overflow-hidden mr-3">
                  {activeConversation.profileImage ? (
                    <img 
                      src={activeConversation.profileImage} 
                      alt={activeConversation.name} 
                      className="h-full w-full object-cover"
                    />
                  ) : (
                    <FaComments className="text-gray-400" />
                  )}
                </div>
                
                <div className="flex-1">
                  <h3 className="text-sm font-medium text-gray-800">
                    {activeConversation.name}
                  </h3>
                  <p className="text-xs text-gray-500">
                    {activeConversation.isOnline ? 'অনলাইন' : 'অফলাইন'}
                  </p>
                </div>
                
                <button className="text-gray-600 hover:text-gray-800">
                  <FaEllipsisV />
                </button>
              </div>
              
              {/* Messages */}
              <div 
                ref={messageContainerRef}
                className="flex-1 p-4 overflow-y-auto bg-gray-50"
              >
                {loading ? (
                  <div className="flex justify-center py-10">
                    <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-500"></div>
                  </div>
                ) : messages.length === 0 ? (
                  <div className="flex flex-col items-center justify-center h-full">
                    <div className="bg-gray-100 rounded-full p-3 mb-3">
                      <FaComments className="text-2xl text-gray-400" />
                    </div>
                    <p className="text-gray-500 text-sm">এখানে কোন বার্তা নেই। একটি বার্তা পাঠিয়ে কথোপকথন শুরু করুন।</p>
                  </div>
                ) : (
                  messages.map((message) => {
                    const isOwnMessage = message.senderId === user.id;
                    
                    return (
                      <div 
                        key={message.id} 
                        className={`mb-4 flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}
                      >
                        {!isOwnMessage && (
                          <div className="h-8 w-8 rounded-full bg-gray-200 flex-shrink-0 mr-2 overflow-hidden">
                            {activeConversation.profileImage ? (
                              <img 
                                src={activeConversation.profileImage} 
                                alt={activeConversation.name} 
                                className="h-full w-full object-cover"
                              />
                            ) : (
                              <FaComments className="h-full w-full text-gray-400 p-1" />
                            )}
                          </div>
                        )}
                        
                        <div className={`max-w-[75%] rounded-lg px-4 py-2 ${isOwnMessage ? 'bg-indigo-500 text-white' : 'bg-white'}`}>
                          {message.content.startsWith('[Image]') ? (
                            <img 
                              src={message.content.replace('[Image] ', '')} 
                              alt="Shared image" 
                              className="max-w-full rounded" 
                            />
                          ) : (
                            <p className="text-sm">{message.content}</p>
                          )}
                          <div className={`text-xs mt-1 ${isOwnMessage ? 'text-indigo-200' : 'text-gray-500'}`}>
                            {formatMessageTime(message.timestamp)}
                          </div>
                        </div>
                      </div>
                    );
                  })
                )}
              </div>
              
              {/* Message Input */}
              <div className="p-4 border-t border-gray-200 relative">
                {showEmojiPicker && (
                  <div className="absolute bottom-20 right-4">
                    <Picker onEmojiClick={onEmojiClick} />
                  </div>
                )}
                
                <form onSubmit={handleSendMessage} className="flex items-center">
                  <button 
                    type="button"
                    onClick={() => fileInputRef.current.click()}
                    className="text-gray-500 hover:text-indigo-600 mr-3"
                  >
                    <FaImage />
                    <input
                      type="file"
                      ref={fileInputRef}
                      className="hidden"
                      accept="image/*"
                      onChange={handleImageUpload}
                    />
                  </button>
                  
                  <button 
                    type="button"
                    onClick={() => setShowEmojiPicker(!showEmojiPicker)}
                    className="text-gray-500 hover:text-indigo-600 mr-3"
                  >
                    <FaSmile />
                  </button>
                  
                  <input
                    type="text"
                    value={messageInput}
                    onChange={(e) => setMessageInput(e.target.value)}
                    placeholder="আপনার বার্তা লিখুন..."
                    className="flex-1 border border-gray-300 rounded-l-md py-2 px-4 text-sm focus:outline-none focus:border-indigo-500"
                  />
                  
                  <button
                    type="submit"
                    disabled={!messageInput.trim()}
                    className={`bg-indigo-600 text-white px-4 py-2 rounded-r-md ${!messageInput.trim() ? 'opacity-50 cursor-not-allowed' : 'hover:bg-indigo-700'}`}
                  >
                    <FaPaperPlane />
                  </button>
                </form>
              </div>
            </>
          ) : (
            <div className="flex-1 flex flex-col items-center justify-center bg-gray-50 p-6">
              <div className="bg-white p-8 rounded-lg shadow-sm text-center max-w-md">
                <div className="inline-block p-4 bg-indigo-100 rounded-full mb-4">
                  <FaComments className="text-3xl text-indigo-600" />
                </div>
                <h3 className="text-xl font-medium text-gray-800 mb-2">আপনার বার্তালাপ</h3>
                <p className="text-gray-600 mb-6">
                  একটি কথোপকথন নির্বাচন করুন বা নতুন একটি শুরু করুন
                </p>
                <p className="text-sm text-gray-500">
                  হোম পেজ থেকে একটি অর্ডার বা ইউজার প্রোফাইল ভিজিট করে মেসেজ পাঠানো যাবে
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Messenger;
